openapi: '3.0.2'

info:
  title: AVM Server
  version: '0.3.0'

servers:
  - url: https://autogram.slovensko.digital/api/v1
  - url: http://localhost:3000/api/v1

tags:
  - name: Mobile2App
  - name: Desktop2App - Extension
  - name: Desktop2App - Client
  - name: Minimal Integration
  - name: QR code
  - name: Integration

paths:
  /documents:
    post:
      tags:
        - Mobile2App
        - Desktop2App - Extension
      security:
        - Header: [ ]
        - Parameter: [ ]
      summary: Client app posts document along with some parameters to Server.
      description: Client app posts document along with some parameters to Server. Server encrypts the document using the provided EncryptionKey and stores it on a disk.
      requestBody:
        content:
          "application/json":
            schema:
              $ref: "#/components/schemas/DocumentPostRequestBody"
            examples:
              Plain TXT document:
                $ref: "#/components/examples/XAdES-ASiC_E-TXT"
              Slovak EForm with resources:
                $ref: "#/components/examples/XAdES-ASiC_E-Base64-HTML"
              Slovak EForm with auto-loaded resources:
                $ref: "#/components/examples/XAdES-ASiC_E-Auto"
              PDF document:
                $ref: "#/components/examples/PAdES-PDF"
              DOCX document:
                $ref: "#/components/examples/XAdES-ASiC_E-DOCX"
              Image with CAdES level:
                $ref: "#/components/examples/CAdES-ASiC_E-PNG_md"
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
            default: application/json
          required: true
          allowEmptyValue: false
      responses:
        200:
          description: Server stored the data and returned GUID so the client can further access the data.
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/CreateDocumentResponseBody"
          headers:
            Last-Modified:
              schema:
                type: string
                pattern: '^(Mon|Tue|Wed|Thu|Fri|Sat|Sun), \d{2} (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) \d{4} \d{2}:\d{2}:\d{2} GMT$'
                example: 'Tue, 15 Oct 2019 12:45:26 GMT'
              description: Datetime of the last-modified attribute of the uploaded file. Useful for polling with the GET document request.
        400:
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestErrorResponseBody"
        401:
          description: EncryptionKey not provided
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EncryptionKeyNotProvidedErrorResponseBody"
        422:
          description: Unprocessable content
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseBody"
        500:
          description: Internal error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalErrorResponseBody"
        502:
          description: Bad gateway - internal error on AVM microservice
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadGatewayErrorResponseBody"

  /documents/{guid}:
    get:
      tags:
        - Desktop2App - Extension
      security:
        - Header: [ ]
        - Parameter: [ ]
      summary: External system requests signed document at the end of the process.
      description: This endpoint is also designed for polling with the `If-Modified-Since` header.
      parameters:
        - name: guid
          in: path
          schema:
            type: string
          required: true
          example: bfde97b4-ee27-47bc-97e2-5164ed96a92a
        - name: If-Modified-Since
          in: header
          required: false
          schema:
            type: string
            example: '2024-05-05 11:52:06 UTC'
        - name: Accept
          in: header
          schema:
            type: string
            default: application/json
          required: true
          allowEmptyValue: false
      responses:
        200:
          description: Requested document with an array of its signers
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/GetDocumentResponseBody"
          headers:
            Last-Modified:
              schema:
                type: string
                example: '2024-05-05 11:52:06 UTC'
              description: "Datetime of the last-modified attribute of the requeste document."
        304:
          description: Requested document has not been modified since `If-Modified-Since` header
          headers:
            Last-Modified:
              schema:
                type: string
                example: '2024-05-05 11:52:06 UTC'
              description: Datetime of the last-modified attribute of the requeste document.
        400:
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestErrorResponseBody"
        401:
          description: EncryptionKey not provided
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EncryptionKeyNotProvidedErrorResponseBody"
        403:
          description: EncryptionKey mismatch
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EncryptionKeyMismatchErrorResponseBody"
        404:
          description: Not found
        422:
          description: Unprocessable content
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseBody"
        500:
          description: Internal error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalErrorResponseBody"
        502:
          description: Bad gateway - internal error on AVM microservice
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadGatewayErrorResponseBody"

    delete:
      tags:
        - Desktop2App - Extension
      security:
        - Header: [ ]
        - Parameter: [ ]
      summary: External system requests signed document at the end of the process.
      description: This endpoint is also designed for polling with the `If-Modified-Since` header.
      parameters:
        - name: guid
          in: path
          schema:
            type: string
          required: true
          example: aedf97b4-ee27-47bc-97e2-5164ed96a92a
      responses:
        204:
          description: Document deleted
        400:
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestErrorResponseBody"
        401:
          description: EncryptionKey not provided
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EncryptionKeyNotProvidedErrorResponseBody"
        403:
          description: EncryptionKey mismatch
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EncryptionKeyMismatchErrorResponseBody"
        404:
          description: Not found
        422:
          description: Unprocessable content
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseBody"
        500:
          description: Internal error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalErrorResponseBody"
        502:
          description: Bad gateway - internal error on AVM microservice
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadGatewayErrorResponseBody"

  /documents/{guid}/visualization:
    get:
      tags:
        - Desktop2App - Client
        - Mobile2App
      security:
        - Header: [ ]
        - Parameter: [ ]
      summary: Client app requests encrypted document to visualize it.
      parameters:
        - name: guid
          in: path
          schema:
            type: string
          required: true
          example: bfde97b4-ee27-47bc-97e2-5164ed96a92a
        - name: Accept
          in: header
          schema:
            type: string
            default: application/json
          required: true
          allowEmptyValue: false
      responses:
        200:
          description: OK
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/DocumentVisualizationResponseBody"
        400:
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestErrorResponseBody"
        401:
          description: EncryptionKey not provided
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EncryptionKeyNotProvidedErrorResponseBody"
        403:
          description: EncryptionKey mismatch
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EncryptionKeyMismatchErrorResponseBody"
        404:
          description: Not found
        422:
          description: Unprocessable content
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseBody"
        500:
          description: Internal error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalErrorResponseBody"
        502:
          description: Bad gateway - internal error on AVM microservice
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadGatewayErrorResponseBody"

  /documents/{guid}/parameters:
    get:
      tags:
        - Desktop2App - Client
      security:
        - Header: [ ]
        - Parameter: [ ]
      summary: Client app gets the signature parameters of the doucment
      parameters:
        - name: guid
          in: path
          schema:
            type: string
          required: true
          example: bfde97b4-ee27-47bc-97e2-5164ed96a92a
        - name: Accept
          in: header
          schema:
            type: string
            default: application/json
          required: true
          allowEmptyValue: false
      responses:
        200:
          description: OK
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/SigningParameters"
        401:
          description: EncryptionKey not provided
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EncryptionKeyNotProvidedErrorResponseBody"
        403:
          description: EncryptionKey mismatch
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EncryptionKeyMismatchErrorResponseBody"
        404:
          description: Not found

  /documents/{guid}/validate:
    get:
      tags:
        - Mobile2App
      security:
        - Header: [ ]
        - Parameter: [ ]
      summary: Client app requests a signature validation report of the document.
      parameters:
        - name: guid
          in: path
          schema:
            type: string
          required: true
          example: bfde97b4-ee27-47bc-97e2-5164ed96a92a
        - name: Accept
          in: header
          schema:
            type: string
            default: application/json
          required: true
          allowEmptyValue: false
      responses:
        200:
          description: Validation report
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DocumentValidationResponseBody"
        204:
          description: Document is not signed yet, no content response.
        400:
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestErrorResponseBody"
        401:
          description: EncryptionKey not provided
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EncryptionKeyNotProvidedErrorResponseBody"
        403:
          description: EncryptionKey mismatch
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EncryptionKeyMismatchErrorResponseBody"
        404:
          description: Not found
        422:
          description: Unprocessable content
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseBody"
        500:
          description: Internal error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalErrorResponseBody"
        502:
          description: Bad gateway - internal error on AVM microservice
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadGatewayErrorResponseBody"

  /documents/{guid}/datatosign:
    post:
      tags:
        - Mobile2App
        - Desktop2App - Client
      security:
        - Header: [ ]
        - Parameter: [ ]
      summary: Client app gets datatosign based on provided signing certificate.
      description: Client app posts signing certificate to the server. Server decrypts the encrypted document from disk, computes DataToSign and returns it along exact signing time in milliseconds. The whole response object is later required for POST /sign request.
      parameters:
        - name: guid
          in: path
          schema:
            type: string
          required: true
          example: bfde97b4-ee27-47bc-97e2-5164ed96a92a
        - name: Accept
          in: header
          schema:
            type: string
            default: application/json
          required: true
          allowEmptyValue: false
      requestBody:
        content:
          "application/json":
            schema:
              $ref: "#/components/schemas/DataToSignRequestBody"
      responses:
        200:
          description: Computed DataToSign and exact SigningTime.
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/DataToSignStructure"
        400:
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestErrorResponseBody"
        401:
          description: EncryptionKey not provided
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EncryptionKeyNotProvidedErrorResponseBody"
        403:
          description: EncryptionKey mismatch
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EncryptionKeyMismatchErrorResponseBody"
        404:
          description: Not found
        422:
          description: Unprocessable content
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseBody"
        500:
          description: Internal error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalErrorResponseBody"
        502:
          description: Bad gateway - internal error on AVM microservice
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadGatewayErrorResponseBody"

  /documents/{guid}/sign:
    post:
      tags:
        - Mobile2App
        - Desktop2App - Client
      security:
        - Header: [ ]
        - Parameter: [ ]
      summary: Create signed document using the SignedData obtained from client.
      parameters:
        - name: guid
          in: path
          schema:
            type: string
          required: true
          example: bfde97b4-ee27-47bc-97e2-5164ed96a92a
        - name: returnSignedDocument
          in: query
          schema:
            type: boolean
            description: Inidcation whether to return signed document in the response. Default to true. Is useful when signing document for external system.
            default: true
          required: false
        - name: Accept
          in: header
          schema:
            type: string
            default: application/json
          required: true
          allowEmptyValue: false
      requestBody:
        content:
          "application/json":
            schema:
              $ref: "#/components/schemas/SignRequestBody"
      responses:
        200:
          description: |
            Document was sucessfuly signed, can be obtained via GET signed request, and is also returned in the response.

            When `"returnSignedDocument": false` Document.Content is empty.
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/SignDocumentResponseBody"
        400:
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestErrorResponseBody"
        401:
          description: EncryptionKey not provided
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EncryptionKeyNotProvidedErrorResponseBody"
        403:
          description: EncryptionKey mismatch
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EncryptionKeyMismatchErrorResponseBody"
        404:
          description: Not found
        409:
          description: Signature invalid
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidSignatureErrorResponseBody"
        422:
          description: Unprocessable content
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseBody"
        500:
          description: Internal error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalErrorResponseBody"
        502:
          description: Bad gateway - internal error on AVM microservice
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadGatewayErrorResponseBody"

  /integrations:
    post:
      tags:
        - Integration
        - Minimal Integration
      summary: Integration registers itself at the server
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PostIntegrationRequestBody"
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PostIntegrationResponse"

  /devices:
    post:
      tags:
        - Integration
        - Minimal Integration
      summary: Device registers itself at the server
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PostDeviceRequestBody"
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PostDeviceResponse"

  /device-integrations:
    post:
      tags:
        - Integration
        - Minimal Integration
      security:
        - Device JWT: []
      summary: Device registers itself for receiving sign requests (push notification) from given integration
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PostDeviceIntegrationsRequestBody"
      responses:
        204:
          description: OK

    get:
      tags:
        - Integration
      security:
        - Device JWT: []
      summary: Device retrieves a list of paired integrations
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetDeviceIntegrationsResponseBody"

  /device-integrations/{integration_id}:
    delete:
      tags:
        - Integration
      security:
        - Device JWT: []
      summary: Device deletes integration from its paired integrations
      parameters:
        - name: integration_id
          in: path
          schema:
            type: string
          description: Identifier of the integration
          example: 0d939eb1-8e14-41e5-9c7e-05e77641cc7b
          required: true
          allowEmptyValue: false
      responses:
        204:
          description: OK
        404:
          description: Not found

  /integration-devices:
    get:
      tags:
        - Integration
      security:
        - Integration JWT: []
      summary: Integration retrieves a list of paired devices
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetIntegrationDevicesResponseBody"

  /integration-devices/{device_id}:
    delete:
      tags:
        - Integration
      security:
        - Integration JWT: []
      summary: Integration deletes device from its paired devices
      parameters:
        - name: device_id
          in: path
          schema:
            type: string
          description: Identifier of the device
          example: 03de5319-a40d-48ea-b4fb-29d11e7017bb
          required: true
          allowEmptyValue: false
      responses:
        204:
          description: OK
        404:
          description: Not found

  /sign-request:
    post:
      tags:
        - Integration
        - Minimal Integration
      security:
        - Integration JWT: []
      summary: Integration sends a sign request (push notification) to all paired signing devices
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PostSignRequestBody"
      responses:
        200:
          description: OK
      callbacks:
        myEvent:
          'FCM-notificaiton-SDK':
            post:
              description: |
                This is a pseudo-description of data sent to subscibing device in `data` payload through Firebase Cloud Messaging.

                `encryptedMessage` conatins document GUID and its encryption key encrypted with AES256 pushkey shared between integration and device,

                Encrpyted message JSON:
                ```json
                {
                  "documentGuid": "bfde97b4-ee27-47bc-97e2-5164ed96a92a",
                  "documentEncryptionKey": "EeESAfZQh9OTf5qZhHZtgaDJpYtxZD6TIOQJzRgRFgQ="
                }
                ```

                The encrypted model is the same as `PostSignRequestBody` in this documentation.
              requestBody:
                content:
                  application/json:
                    schema:
                      type: object
                      properties:
                        encryptedMessage:
                          type: string
                          example: ZhHZtgaDJpYtxZD6TIOQJzRgRFgQ...
                      required:
                        - message
              responses:
                200:
                  description: OK

  /qr-code:
    get:
      tags:
        - QR code
      summary: URL format used by Autogram extenision and Autogram v mobile app
      description: |
        This QR code / URL is a standard used by Autogram browser extension and Autogram v mobile application. Server doesn't really care if potential other integrations / applications use the same format or not.

        Example: `https://autogram.slovensko.digital/api/v1/qr-code?guid=e7e95411-66a1-d401-e063-0a64dbb6b796&key=EeESAfZQh9OTf5qZhHZtgaDJpYtxZD6TIOQJzRgRFgQ%3D&integration=eyJhbGciOiJFUzI1NiJ9.eyJzdWIiOiI3OGQ5MWRlNy0xY2MyLTQwZTQtOWE3MS0zODU4YjRmMDMxOWQiLCJleHAiOjE3MTI5MDk3MjAsImp0aSI6IjAwZTAxN2Y1LTI4MTAtNDkyNS04ODRlLWNiN2FhZDAzZDFhNiIsImF1ZCI6ImRldmljZSJ9.7Op6W2BvbX2_mgj9dkz1IiolEsQ1Z2a0AzpS5bj4pcG3CJ4Z8j9W3RQE95wrAj3t6nmd9JaGZSlCJNSV_myyLQ`

        <img src="data:image/png;base64, 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JEyPHj169OjRO8t5YRLoOaFNrb09PNbppekW7u2+8L3TVunRo0ePHj16sWe17yEUtWqBaO867mW1rVj1vqF32NksH6NHjx49evToXRahJsy9tlbPOATAw5Lc3pl7fpe/2N+jR48ePXr0frRe3f9eOKu5rD5qSnwvfeoG65Nr8LyPqvTo0aNHjx6980fvPnVmqVas9qmkmx7iTZuxdPCebxI9evTo0aNH73f/X6n3Nwr8lfCadU/WU0fwZuyqNEnp0aNHjx49er/7GE04sZAq66HW2lUV3Uton4nSh41TevTo0aNHj977A3weNLqZjK4+dci6ftvLczqcE5/Gs+rVoUePHj169Ohd6N0UeT54qNeVt1AFvPm9qcNYz4UePXr06NGjF1tYtQE3/bUORd909aa226R82Aw8bD3So0ePHj169GLKquWyPYyGE3sTv87aaXulrPp8+prQo0ePHj169JaQFLpcU71oL4iFp+yh9ebIp2sSkuZUM6NHjx49evToxXxZQ+bzqp258B2n0S2i1+LcVFXcO4L06NGjR48evVhmqgPBobL1HBT3Le3h8RDzZuc1UJ729+jRo0ePHr2v05uOt9ap9rmeWtSqsfmD+bf2Aaf24TZ7RY8ePXr06NE7ktrnhELAuumL7R8L51kTeK3f7YNL9OjRo0ePHr2lt7VP7hweTC2XTXeltuxCB6++2lQUzJVBevTo0aNH79v16stMouEA9z0c1r1qwt03vdfv9ktEjx49evTo0Vs2t9NMlyPE3BrxDnuSh5XB2svbO6D06NGjR48evdvMOSWqfU6oDjOFnDc15cLFum5qHoZlevTo0aNHj968DqtE0+nsjcTaWKtR8PmX98+GgmK+mfTo0aNHj9636+1BbEqGU4PwBjhUrGoY3VuUtbZW35QePXr06NGjF1t7h4d1U1ur537Y7pvy5eGV3fuFNW7So0ePHj169JbkNX37YXftcCZo/+X6lXufcq+KhS3Qo0ePHj169Ga9vXw0dc2m87z+6c0lmup8U1+RHj169OjRo/dhvXrke0lpuhc1sE3FtOfTCDfk+Yum16VHjx49evTozf29m/JRaHrdDDjVaDn1FafreTiFNV1AevTo0aNHj9585HWEqX42RLLDlthnenT7PFGQr4NL9OjRo0ePHj3rv7bo0bPoWfToWfQsehY9ehY9i55Fj55Fz6JHz6Jn0bPo/dz1Px4NXyy79PLkAAAAAElFTkSuQmCC" width="300px" height="300px"/>
      parameters:
        - name: guid
          in: query
          schema:
            type: string
          description: GUID of a document
          example: e7e95411-66a1-d401-e063-0a64dbb6b796
          required: true
        - name: key
          in: query
          schema:
            type: string
          description: AES256 key in Base64 for the document
          example: EeESAfZQh9OTf5qZhHZtgaDJpYtxZD6TIOQJzRgRFgQ=
          required: true
        - name: integration
          in: query
          schema:
            type: string
          description: 'JWT of source integration. Can be used to pair device with the integration. Must contain `aud: "device"` claim'
          example: eyJhbGciOiJFUzI1NiJ9.eyJzdWIiOiI3OGQ5MWRlNy0xY2MyLTQwZTQtOWE3MS0zODU4YjRmMDMxOWQiLCJleHAiOjE3MTI5MDk3MjAsImp0aSI6IjAwZTAxN2Y1LTI4MTAtNDkyNS04ODRlLWNiN2FhZDAzZDFhNiIsImF1ZCI6ImRldmljZSJ9.7Op6W2BvbX2_mgj9dkz1IiolEsQ1Z2a0AzpS5bj4pcG3CJ4Z8j9W3RQE95wrAj3t6nmd9JaGZSlCJNSV_myyLQ
          required: false
      responses:
        302:
          description: Redirect to app download page. The QR code / url should be open through Autogram v mobile app and parameters should be parsed and used for document signing or integration pairing.

components:
  schemas:
    PostSignRequestBody:
      type: object
      properties:
        documentGuid:
          type: string
          example: e1b2fafc-59c4-46de-ac0a-83aa782184e9
          description: GUID of the document to sign
        documentEncryptionKey:
          type: string
          description: AES256 encryption key in hexadecimal form (64 characters) that is used to encrypt and decrypt signing doucment.
          example: EeESAfZQh9OTf5qZhHZtgaDJpYtxZD6TIOQJzRgRFgQ=
      required:
        - documentGuid
        - documentEncryptionKey

    PostIntegrationRequestBody:
      type: object
      properties:
        platform:
          type: string
          description: Platform identifier
          example: extension
        displayName:
          type: string
          description: Human-readable name of the integration
          example: Autogram browser extension
        publicKey:
          type: string
          description: Integration's ES256 public key that shall be used to authenticate its JWT tokens. Either with or without "-----BEGIN PUBLIC KEY-----\n...\n-----END PUBLIC KEY-----".
          example: "-----BEGIN PUBLIC KEY-----\nMFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAEGoqUt0JPQgvvMhLNxFQkwOoClKxDK8D8oW+qmakxQuOJuy/V0uKPJbhRkEWz8WPFZCUXUr1LsD5E667h5StmLw==\n-----END PUBLIC KEY-----"
      required:
        - platform
        - displayName
        - publicKey

    PostIntegrationResponse:
      type: object
      properties:
        guid:
          type: string
          description: Assigned identifier
          example: 57820662-f56c-4b2f-97d1-e95306aee6db
      required:
        - guid

    PostDeviceRequestBody:
      type: object
      properties:
        platform:
          type: string
          description: Platform of the signing device used to determine which notification service to use. (`android` or `ios`)
          example: android
        registrationId:
          type: string
          description: Identifier of the app instance registration entry in the notification service (APNS or GCM)
          example: idk32b83ef7-21fe-4120-b8fa-d9f6aba05731
        displayName:
          type: string
          description: Human-readable name of the device
          example: John's phone
        publicKey:
          type: string
          description: Device's ES256 public key that shall be used to authenticate its JWT tokens. Either with or without "-----BEGIN PUBLIC KEY-----\n...\n-----END PUBLIC KEY-----".
          example: "-----BEGIN PUBLIC KEY-----\nMFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAE1iPVm0v/ZNM04587g10F54JVIrMZqWnlOXuGjOvcYsuweTYxuXafP8aJ6kIXe+jQhjeldm2mQZzSZ4ceLRq0yA==\n-----END PUBLIC KEY-----"
        pushkey:
          type: string
          description: Device's AES256 key in Base64 form that shall be used to encrypt notificaiton messages sent to the device
          example: "R/rfN+z129w1H2iftbr1GOKXdC3OxSJU9PZeHs+W7ts="
      required:
        - platform
        - registrationId
        - displayName
        - publicKey
        - pushkey

    PostDeviceResponse:
      type: object
      properties:
        guid:
          type: string
          description: Assigned identifier
          example: 03de5319-a40d-48ea-b4fb-29d11e7017bb

    GetDeviceIntegrationsResponseBody:
      type: array
      items:
        type: object
        properties:
          integrationId:
            type: string
            description: Identifier of the integration
            example: 0d939eb1-8e14-41e5-9c7e-05e77641cc7b
          platform:
            type: string
            description: Platform identifier
            example: extension
          displayName:
            type: string
            description: Human-readable name of the integration
            example: Autogram browser extension
        required:
          - platform
          - integrationId
          - displayName

    GetIntegrationDevicesResponseBody:
      type: array
      items:
        type: object
        properties:
          deviceId:
            type: string
            description: Identifier of the device
            example: 03de5319-a40d-48ea-b4fb-29d11e7017bb
          platform:
            type: string
            description: Platform of the signing device used to determine which notification service to use. (`android` or `ios`)
            example: android
          displayName:
            type: string
            description: Human-readable name of the device
            example: John's phone
        required:
          - platform
          - deviceId
          - displayName

    PostDeviceIntegrationsRequestBody:
      type: object
      properties:
        integrationPairingToken:
          type: string
          description: "JWT token provided by integration on pairing. The token must contain `aud: \"device\"` claim."
          example: eyJhbGciOiJFUzI1NiJ9.eyJzdWIiOiI3OGQ5MWRlNy0xY2MyLTQwZTQtOWE3MS0zODU4YjRmMDMxOWQiLCJleHAiOjE3MTI5MDk3MjAsImp0aSI6IjAwZTAxN2Y1LTI4MTAtNDkyNS04ODRlLWNiN2FhZDAzZDFhNiIsImF1ZCI6ImRldmljZSJ9.7Op6W2BvbX2_mgj9dkz1IiolEsQ1Z2a0AzpS5bj4pcG3CJ4Z8j9W3RQE95wrAj3t6nmd9JaGZSlCJNSV_myyLQ
      required:
        - integrationPairingToken

    DocumentPostRequestBody:
      type: object
      properties:
        document:
          $ref: "#/components/schemas/Document"
        parameters:
          $ref: "#/components/schemas/SigningParameters"
        payloadMimeType:
          type: string
          example: text/plain;base64
          description: |
            MIME type for document content and signature parameters XSLT transformation and XSD schema.
            Binary files should be encoded using base64, e.g., `application/pdf;base64`.
            Text formats like XML can be optionally encoded using base64 or supplied as plain text.
            
            If omitted, mimetype is decided based on document.filename and content is expected to be in Base64.
      required:
        - document

    SigningCertificate:
      type: string
      description: Base64 encoded x509 certificate of the signing entity
      example: MIIDZjCCAk6gAwIBAgIEZVH4UzANBgkqhkiG9w0BAQsFADB1MQswCQYDVQQGEwJTSzETMBEGA1UECAwKQnJhdGlzbGF2YTETMBEGA1UEBwwKQnJhdGlzbGF2YTERMA8GA1UECgwIQXV0b2dyYW0xETAPBgNVBAsMCEF1dG9ncmFtMRYwFAYDVQQDDA1BdXRvZ3JhbSBUZXN0MB4XDTIzMTExMzEwMjAwM1oXDTI0MTExMjEwMjAwM1owdTELMAkGA1UEBhMCU0sxEzARBgNVBAgMCkJyYXRpc2xhdmExEzARBgNVBAcMCkJyYXRpc2xhdmExETAPBgNVBAoMCEF1dG9ncmFtMREwDwYDVQQLDAhBdXRvZ3JhbTEWMBQGA1UEAwwNQXV0b2dyYW0gVGVzdDCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBAN8d3eH2xRJeesoNmDIguuHBv5hhqRPsN4LGjGmhQ9NrBAN1DKW31wh0+Tfdx58GNztgLVpElpQB7/yBprqNAKADYXs+onkUbg4X798lAbiaaMvQzY9dVXhFhb1I2ZEGurNhZqP01wbjRso4O0UJ2wSIw5r/sZZji17VhdhquVzDP+RzJeU36CRohE7T1caG6Q1/Tl5arSvEcJMz/8YUYjudB0Bbj+1Z06JTWK+FW/7zJmPNsRGSnF/TLIMDvIabMDoUswP7wBPbnoWy+B/tTdKnl818OKilRlZf5mjmINvZ8I3eXl0WRA/UlURuAp3PprcZnBdejCBHNomgyML8G9sCAwEAATANBgkqhkiG9w0BAQsFAAOCAQEAKD+0fM+cRVkDOoTU9qyESQ6tma8cchjV8dVvTbvHmLTZYCBxKUTugZOz9tENd+9p+1uGc6opcCrmiHyq0oG8D8Y9FLzHFKgslod4+IHUOON/pes+r6b4/0Z4+rjuZ5JrDyeIWsGtwVQaM6BeC1afr/H7uT9kr8Eu1ElNw/SAWBmQZiz3e40XF2ijPd9b43p05O0dqBF0q383bD2K15QJofzCM+0I0OqhJwsWvHlupoPlcF4gRqFV7MUQ5QHXOryUCICp8h2O8988JFvXxaJKGMCU9Zfick3KJ3UsdJ+0jbCL4pOep75abBD6pcdD9qlUF4seiiQiceMbmmeTQfqTgg==

    DataToSign:
      type: string
      description: Base64 encoded DataToSign object
      example: MYIBBDAYBgkqhkiG9w0BCQMxCwYJKoZIhvcNAQcBMC8GCSqGSIb3DQEJBDEiBCBi60eUI/NmObmcTwDsze2zBooVmgpZh8puJa4OhNpEejCBtgYLKoZIhvcNAQkQAi8xgaYwgaMwgaAwgZ0EIJz+4gnulo5kn6oovtKTUeONdQyNjCUKINcKqCmvL7JwMHkwa6RpMGcxCzAJBgNVBAYTAlNLMRMwEQYDVQQHEwpCcmF0aXNsYXZhMRcwFQYDVQRhEw5OVFJTSy0zNTk3NTk0NjETMBEGA1UEChMKRGlzaWcgYS5zLjEVMBMGA1UEAxMMU1ZLIGVJRCBBQ0EyAgoG/pWsnJ0ABRcV

    SigningTime:
      type: integer
      description: Epoch timestamp in milliseconds of the signing time
      example: 1707900119123

    DataToSignRequestBody:
      type: object
      properties:
        signingCertificate:
          $ref: "#/components/schemas/SigningCertificate"
        addTimestamp:
          type: boolean
          description: Indication whether to add a timestamp to the signature if it was not set at document creation time
          example: true
          default: false
      required:
        - signingCertificate

    DataToSignStructure:
      type: object
      properties:
        dataToSign:
          $ref: "#/components/schemas/DataToSign"
        signingTime:
          $ref: "#/components/schemas/SigningTime"
        signingCertificate:
          $ref: "#/components/schemas/SigningCertificate"
      required:
        - dataToSign
        - signingTime
        - signingCertificate

    SignRequestBody:
      type: object
      properties:
        signedData:
          type: string
          description: DataToSign signed by SigningCertificate
          example: eP49QHaKINDTo8/56O6ZlDVKGn3FYq+fRqnCMpQExYVIWrHeZkGoq2FxRRThlEKkOBUS5+8+RHZzOf4yXAFfKjNmNdMnyisEUToQqYSQavec3KZPaDgcvNdZ4MC+tRMcwTod75Zu87UleyOLe3Xoqxjteq7MvqVRCc/C1sX2yVab3yIOSgoZILpHgTl4EqTOonVJts4XBnEzuZKwXS10KyumjoSE41EqTrM/mwy95ebdrRZqNI5EWJIzor8jC5AMsmsBWvxeBKkfepFiWHMtTy1iYkJMZ6vbttlEdTSt9OqSszyw7Z7fP7Tl55hkKL4fiiXA9DOzyibn4E1XD1tRPRaqulxsdIrTbnMgeXlteXG3XXK76+OgqnRxb2hxPx6H8Qiig0GhK1Qn2H26JaNrpFjsqT9n7md9PzLuhmB4MI7HxOUCdAxmRt4cxNkJdHB2NsDBVfQ7FBNxxi35j93D/GD2KpaG77Iq/5ZfBegvQn28N2oGh/xsEqc3hoc6o23E
        dataToSignStructure:
          $ref: "#/components/schemas/DataToSignStructure"
          description: The original DataToSignStructre to compare it with DataToSignStructure generated in this request to verify consistency
      required:
        - signingCertificate
        - signingTime
        - signedData
        - dataToSignStructure

    SignDocumentResponseBody:
      type: object
      properties:
        filename:
          type: string
          description: Filename of the signed document
          example: sample_document.pdf
        mimeType:
          type: string
          description: mimeType of the signed document
          enum:
            - "application/pdf;base64"
            - "application/vnd.etsi.asic-e+zip;base64"
            - "application/vnd.etsi.asic-s+zip;base64"
        content:
          type: string
          description: Base64 encrypted content of the signed document
          example: ZXhhbXBsZSBvZiBzaWduZWQgZG9jdW1lbnQgaW4gYmFzZTY0Cg==
        signedBy:
          type: string
          example: "SERIALNUMBER=PNOSK-1234567890, C=SK, L=Bratislava, SURNAME=Smith, GIVENNAME=John, CN=John Smith"
          description: "Distinguished name of the certificate used/attempting to sign the document."
        issuedBy:
          type: string
          example: "CN=SVK eID ACA2, O=Disig a.s., OID.2.5.4.97=NTRSK-12345678, L=Bratislava, C=SK"
          description: "Distinguished name of the issuer of the certificate used/attempting to sign the document."
      required:
        - filename
        - mimeType
        - content
        - signedBy
        - issuedBy

    GetDocumentResponseBody:
      type: object
      properties:
        filename:
          type: string
          description: Filename of the signed document
          example: sample_document.pdf
        mimeType:
          type: string
          description: mimeType of the signed document
          enum:
            - "application/pdf;base64"
            - "application/vnd.etsi.asic-e+zip;base64"
            - "application/vnd.etsi.asic-s+zip;base64"
        content:
          type: string
          description: Base64 encrypted content of the signed document
          example: ZXhhbXBsZSBvZiBzaWduZWQgZG9jdW1lbnQgaW4gYmFzZTY0Cg==
        signers:
          type: array
          description: Array of all signers of the documents
          items:
            type: object
            properties:
              signedBy:
                type: string
                example: "SERIALNUMBER=PNOSK-1234567890, C=SK, L=Bratislava, SURNAME=Smith, GIVENNAME=John, CN=John Smith"
                description: "Distinguished name of the certificate used/attempting to sign the document."
              issuedBy:
                type: string
                example: "CN=SVK eID ACA2, O=Disig a.s., OID.2.5.4.97=NTRSK-12345678, L=Bratislava, C=SK"
                description: "Distinguished name of the issuer of the certificate used/attempting to sign the document."
      required:
        - filename
        - mimeType
        - content
        - signedBy
        - issuedBy

    Document:
      type: object
      properties:
        filename:
          type: string
          description: Filename of the document. payloadMimeType must be provided if empty. Also, if payloadMimeType is empty, filename must be provided and mimetype must be understood from extension.
          example: sample_document.txt
        content:
          type: string
          description: Base64 encrypted content of the document
          example: ZXhhbXBsZSBzdHJpbmcgaW4gYmFzZTY0Cg==
      required:
        - content

    SignatureLevelResponse:
      type: object
      properties:
        level:
          type: string
          description: Signature level.
          example: XAdES_BASELINE_B
          enum:
            - PAdES_BASELINE_B
            - PAdES_BASELINE_T
            - XAdES_BASELINE_B
            - XAdES_BASELINE_T
            - CAdES_BASELINE_B
            - CAdES_BASELINE_T

    SigningParameters:
      type: object
      description: Signing parameters same as in the Autogram API
      properties:
        checkPDFACompliance:
          type: boolean
          default: false
          description: "Check for PDF/A compliance and show warning if not compliant."

        autoLoadEform:
          type: boolean
          default: false
          description:
            Try to find XSD and XSLT for a given eForm and load them automatically. Useful for visualizing and signing eForms.
            If true, schema, transformation, conatinerXmlns, container, packaging, and identifier parameters are ignored.
            If resources are not found, the response is 422.
            If provided document is an ASiC_E container conatining XML Datacontainer or it is an XML Datacontainer itself, XSLT found is used for visualiztion of signing document. Also, XSD and XSLT hashes are compared with hashes of XSD and XSLT found in XML Data Container EForm. If they differ, the response is 422.
            If the provided document is an XML document, Autogram will try to parse xmlns from root element and find resources based on its value.
            If successful, XML Datacontainer with xmls="http://data.gov.sk/def/container/xmldatacontainer+xml/1.1" is created, the document is validated against the XSD and visualized using the XSLT. If XSD validation fails, the response is 422.
            The XSLT transformation is found based on transformationLanguage (defaults to user preferred), transformationMediaDestinationTypeDescription (default XHTML, then HTML, then TXT), and transformationTargetEnvironment.
            If multiple transformations meet the criteria, the first one found is used.

        level:
          type: string
          description: Signature level.
          example: XAdES_BASELINE_B
          enum:
            - PAdES_BASELINE_B
            - PAdES_BASELINE_T
            - XAdES_BASELINE_B
            - XAdES_BASELINE_T
            - CAdES_BASELINE_B
            - CAdES_BASELINE_T

        container:
          type: string
          description: Type of Advanced Signature Container. Defaults to null - no container.
          example: ASiC-E
          enum:
            - ASiC-E
            - ASiC-S

        containerXmlns:
          type: string
          enum:
            - http://data.gov.sk/def/container/xmldatacontainer+xml/1.1
          example: http://data.gov.sk/def/container/xmldatacontainer+xml/1.1
          description: XML namespace for the XML Datacontainer. Specifies if xmldatacontainer should be created from XML. Doesn't create xmldatacontainer if payloadMimeType is application/vnd.gov.sk.xmldatacontainer+xml already. Accepts http://data.gov.sk/def/container/xmldatacontainer+xml/1.1 only. Defaults to null. Is ignored with autoLoadEform true.

        embedUsedSchemas:
          type: boolean
          example: false
          description: When creating XML Datacontainer, parameter indicates whether to embed XSD and XML or reference them. Practically this should be only used for ORSR EForms in which case (when identifier contains "justice.gov.sk/Forms") this parameter is overridden to true.

        identifier:
          type: string
          example: https://data.gov.sk/id/egov/eform/App.GeneralAgenda/1.9
          description: Optional identifier of the document template. Required if containerXmlns is http://data.gov.sk/def/container/xmldatacontainer+xml/1.1. Defaults to null. Is ignored with autoLoadEform true.

        packaging:
          type: string
          enum:
            - ENVELOPED
            - ENVELOPING
          default: ENVELOPED
          description: Optional form of packaging used with XML. ENVELOPED adds the signature as a child of the root element while ENVELOPING wraps the XML in a new element. Only applies to XAdES signatures. Must be ENVELOPING when used without ASiC container and with non XML documents. Is ignored with autoLoadEform true.

        digestAlgorithm:
          type: string
          enum:
            - SHA256
            - SHA384
            - SHA512
          default: SHA256
          description: Optional algorithm used to calculate digests.

        en319132:
          type: boolean
          default: false
          description: Optional flag to control whether the signature should be made according to ETSI EN 319132 for XAdES and ETSI EN 319122 for CAdES and PAdES.

        infoCanonicalization:
          type: string
          enum:
            - INCLUSIVE
            - EXCLUSIVE
            - INCLUSIVE_WITH_COMMENTS
            - EXCLUSIVE_WITH_COMMENTS
            - INCLUSIVE_11
            - INCLUSIVE_11_WITH_COMMENTS
          default: INCLUSIVE
          description: Optional info canonicalization method.

        propertiesCanonicalization:
          type: string
          enum:
            - INCLUSIVE
            - EXCLUSIVE
            - INCLUSIVE_WITH_COMMENTS
            - EXCLUSIVE_WITH_COMMENTS
            - INCLUSIVE_11
            - INCLUSIVE_11_WITH_COMMENTS
          default: INCLUSIVE
          description: Optional properties canonicalization method.

        keyInfoCanonicalization:
          type: string
          enum:
            - INCLUSIVE
            - EXCLUSIVE
            - INCLUSIVE_WITH_COMMENTS
            - EXCLUSIVE_WITH_COMMENTS
            - INCLUSIVE_11
            - INCLUSIVE_11_WITH_COMMENTS
          default: INCLUSIVE
          description: Optional key info canonicalization method.

        schema:
          type: string
          example: '<?xml version="1.0"?><xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema"><xs:element name="Document"><xs:complexType><xs:sequence><xs:element name="Title" type="xs:string" /></xs:sequence></xs:complexType></xs:element></xs:schema>'
          description: Optional XML schema used to validate the signing document and to compute digest used in "UsedXSDReference" in "DigestValue" attribute inside created XML Datacontainer. Format (plaintext or base64) is dictated by `payloadMimeType`. Is ignored with autoLoadEform true.

        schemaIdentifier:
          type: string
          example: http://schemas.gov.sk/form/App.GeneralAgenda/1.9/form.xsd
          description: Optional identifier of the XML schema. The value is used in "UsedXSDReference" field inside created XML Datacontainer. If provided with autoLoadEform true, Autogram will try to find such schema. Default value is "http://schemas.gov.sk/form/<form-idnetifier>/<version>/form.xsd".

        transformation:
          type: string
          example: '<?xml version="1.0"?><xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform"><xsl:template match = "/"><h1><xsl:value-of select="/Document/Title"/></h1></xsl:template></xsl:stylesheet>'
          description: Optional XML transformation used to present the signing document to user and to compute digest used in "UsedPresentationSchemaReference" in "DigestValue" attribute inside created XML Datacontainer. Format (plaintext or base64) is dictated by `payloadMimeType`. Is ignored with autoLoadEform true.

        transformationIdentifier:
          type: string
          example: http://schemas.gov.sk/form/App.GeneralAgenda/1.9/form.xslt
          description: Optional identifier of the XML transformation. If provided with autoLoadEform true, Autogram will try to find such transformation. Default value is "http://schemas.gov.sk/form/<form-idnetifier>/<version>/form.xslt".

        transformationLanguage:
          type: string
          example: sk
          description: Optional language of the XML transformation. If autoLoadEform is true, Autogram will try to find signing XSLT with this language. Otherwise transformation must be provided. Default value is user preferred or "sk".

        transformationMediaDestinationTypeDescription:
          type: string
          enum:
            - XHTML
            - HTML
            - TXT
          example: HTML
          description: Optional media destination type description of the XML transformation. If autoLoadEform is true, Autogram will try to find signing XSLT with this type. Otherwise transformation must be provided. Overrides value of the output method in provided or auto-loaded transformation which is used by default.

        transformationTargetEnvironment:
          type: string
          example: example-value
          description: Optional target environment of the XML transformation. If autoLoadEform is true, Autogram will try to find signing XSLT with this target. Otherwise transformation must be provided. Null and not used by default.
      example:
        level: XAdES_BASELINE_B
        container: ASiC-E

    CreateDocumentResponseBody:
      type: object
      properties:
        guid:
          type: string
          description: GUID of the posted document
          example: bfde97b4-ee27-47bc-97e2-5164ed96a92a
      required:
        - guid

    DocumentVisualizationResponseBody:
      type: object
      properties:
        mimeType:
          type: string
          example: "application/pdf;base64"
        filename:
          type: string
          description: Name of the document
          example: sample_document.pdf
        content:
          type: string
          description: Base64 encoded contentto be displayed
          example: ZXhhbXBsZSBzdHJpbmcgaW4gYmFzZTY0Cg==
      required:
        - mimeType
        - content

    DocumentValidationResponseBody:
      type: object
      properties:
        containerType:
          type: string
          enum:
            - ASiC_E
            - ASiC_S
          description: Format of the validated container. ASiC_E or ASiC_S. Null if not a container
          example: ASiC_E
        signatureForm:
          type: string
          enum:
            - XAdES
            - CAdES
            - PAdES
          description: Signature form of the validated document
          example: XAdES
        signatures:
          type: array
          items:
            type: object
            properties:
              validationResult:
                type: object
                description: |
                  The standard ETSI EN 319 102-1 specifies a complete validation model and procedures for the validation of “AdES digital signatures”, which are implemented in the underlying DSS module.
                  The validation result can have these values:

                  "0 TOTAL_PASSED: indicating that the signature has passed verification and it complies with the signature validation policy"

                  "1 TOTAL_FAILED: indicating that either the signature format is incorrect or that the digital signature value fails the verification"

                  "2 INDETERMINATE: indicating that the format and digital signature verifications have not failed but there is insufficient information to determine if the electronic signature is valid"
                properties:
                  code:
                    type: integer
                    enum:
                      - 0
                      - 1
                      - 2
                    example: 0
                  description:
                    type: string
                    enum:
                      - TOTAL_PASSED
                      - TOTAL_FAILED
                      - INDETERMINATE
                    example: TOTAL_PASSED
                required:
                  - code
                  - description
              level:
                type: string
                enum:
                  - XAdES_BASELINE_B
                  - XAdES_BASELINE_T
                  - XAdES_BASELINE_LT
                  - XAdES_BASELINE_LTA
                  - PAdES_BASELINE_B
                  - PAdES_BASELINE_T
                  - PAdES_BASELINE_LT
                  - PAdES_BASELINE_LTA
                  - CAdES_BASELINE_B
                  - CAdES_BASELINE_T
                  - CAdES_BASELINE_LT
                  - CAdES_BASELINE_LTA
                description: Signature level of the signature.
                example: XAdES_BASELINE_LTA
              claimedSigningTime:
                type: string
                description: Claimed signing time based on the signature only.
                example: "2023-08-01T12:37:47 +0200"
              bestSigningTime:
                type: string
                description: Lowest time at which there exists a proof of existence for the signature.
                example: "2023-08-01T12:37:47 +0200"
              signingCertificate:
                type: object
                description: Signing certificate details.
                properties:
                  qualification:
                    type: object
                    description: Qualification of the signature at validation time. For more info check out Java class eu.europa.esig.dss.enumerations.SignatureQualification
                    properties:
                      code:
                        type: integer
                        example: 1
                      description:
                        type: string
                        enum:
                          - QESIG
                          - QESEAL
                          - UNKNOWN_QC_QSCD-QC-QSCD
                          - ADESIG_QC-QC
                          - ADESEAL_QC-QC
                          - UNKNOWN_QC-QC
                          - ADESIG
                          - ADESEAL
                          - UNKNOWN
                          - INDETERMINATE_QESIG
                          - INDETERMINATE_QESEAL
                          - INDETERMINATE_UNKNOWN_QC_QSCD
                          - INDETERMINATE_ADESIG_QC
                          - INDETERMINATE_ADESEAL_QC
                          - INDETERMINATE_UNKNOWN_QC
                          - INDETERMINATE_ADESIG
                          - INDETERMINATE_ADESEAL
                          - INDETERMINATE_UNKNOWN
                          - NOT_ADES_QC_QSCD
                          - NOT_ADES_QC
                          - NOT_ADES
                          - NA
                        example: QESEAL
                    required:
                      - code
                      - description
                  issuerDN:
                    type: string
                    description: RFC1779 of the signing certificate issuer name.
                    example: "OID.2.5.4.5=NTRCZ-26439395, O=\"První certifikační autorita, a.s.\", CN=I.CA Qualified CA/RSA 07/2015, C=CZ"
                  subjectDN:
                    type: string
                    description: RFC1779 of the signing certificate name.
                    example: "OID.2.5.4.5=ICA - 10432139, OID.2.5.4.97=NTRSK-00166073, CN=Ministerstvo spravodlivosti SR, O=Ministerstvo spravodlivosti SR, C=SK"
                  certificateDer:
                    type: string
                    description: Base64 encoded DER form of the certificate
                    example: "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"
                required:
                  - qualification
                  - issuerDN
                  - subjectDN
                  - certificateDer
              areQualifiedTimestamps:
                type: boolean
                description: Boolean indicating if the signature has any timestamps and they are all qualified and valid.
                example: true
              timestamps:
                type: array
                description: List of timestamps on the signature.
                items:
                  type: object
                  properties:
                    qualification:
                      type: object
                      description: |
                        Qualification status fo the timestamp at validation time.

                        QTSA - Qualified timestamp" - "urn:cef:dss:timestampQualification:QTSA"

                        TSA - Not qualified timestamp" - "urn:cef:dss:timestampQualification:TSA"

                        NA - Not applicable" - "urn:cef:dss:timestampQualification:notApplicable"
                      properties:
                        code:
                          type: integer
                          enum:
                            - 0
                            - 1
                            - 2
                          example: 0
                        description:
                          type: string
                          enum:
                            - QTSA
                            - TSA
                            - NA
                          example: QTSA
                      required:
                        - code
                        - description
                    timestampType:
                      type: string
                      enum:
                        - CONTENT_TIMESTAMP
                        - ALL_DATA_OBJECTS_TIMESTAMP
                        - INDIVIDUAL_DATA_OBJECTS_TIMESTAMP
                        - SIGNATURE_TIMESTAMP
                        - VRI_TIMESTAMP
                        - VALIDATION_DATA_REFSONLY_TIMESTAMP
                        - VALIDATION_DATA_TIMESTAMP
                        - DOCUMENT_TIMESTAMP
                        - ARCHIVE_TIMESTAMP
                      description: Type of the timestamp
                      example: SIGNATURE_TIMESTAMP
                    subjectDN:
                      type: string
                      description: RFC1779 of the timestamp certificate name.
                      example: CN=NASES Time Stamp Authority 2, O=Národná agentúra pre sieťové a elektronické služby, OID.2.5.4.97=NTRSK-42156424, OU=SNCA, C=SK
                    certificateDer:
                      type: string
                      description: Base64 encoded DER form of the certificate
                      example: "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"
                    productionTime:
                      type: string
                      description: ProductionTime of the timestamp.
                      example: "2023-08-01T12:37:47 +0200"
                  required:
                    - qualification
                    - timestampType
                    - subjectDN
                    - certificateDer
                    - productionTime
              signedObjectsIds:
                type: array
                items:
                  type: string
                  description: List of IDs referencing files this signature have signed.
                  example: "D-0D9E226205D94EDEBAFEDA4F2A9B17DEDD556529C0753C7F49C197DC8491B71A"
            required:
              - validationResult
              - level
              - claimedSigningTime
              - bestSigningTime
              - signingCertificate
              - areQualifiedTimestamps
              - signedObjectIds
        signedObjects:
          type: array
          description: List of files in the container that are signed by at least one signature
          items:
            type: object
            properties:
              id:
                type: string
                description: ID of the file used to reference the file in signatures
                example: "D-0D9E226205D94EDEBAFEDA4F2A9B17DEDD556529C0753C7F49C197DC8491B71A"
              mimeType:
                type: string
                description: MimeType of the file
                example: application/pdf
              filename:
                type: string
                description: Filename of the file in the container. If the validated document is PAdES or standalone XAdES where filename is unknown, this attribute should be ignored.
                example: Sro_119763_B.pdf
            required:
              - mimetype
              - filename
              - id
        unsignedObjects:
          type: array
          description: List of files in the container that have not been referenced in any signature yet
          items:
            type: object
            properties:
              mimeType:
                type: string
                description: MimeType of the file
                example: application/pdf
              filename:
                type: string
                description: Filename of the file in the container. If the validated document is PAdES or standalone XAdES where filename is unknown, this attribute should be ignored.
                example: Some_unsigned_document.pdf
            required:
              - mimetype
              - filename
      example:
        value:
          containerType: ASiC_E
          signatureForm: XAdES
          signatures:
            validationResult:
              code: 0
              description: TOTAL_PASSED
            level: XAdES_BASELINE_LTA
            claimedSigningTime: 2023-08-01T12:37:47 +0200
            bestSigningTime: 2023-08-01T12:37:47 +0200
            signingCertificate:
              qualification:
                code: 1
                description: QESEAL
              issuerDN: "OID.2.5.4.5=NTRCZ-26439395, O=\"První certifikační autorita, a.s.\", CN=I.CA Qualified CA/RSA 07/2015, C=CZ"
              subjectDN: "OID.2.5.4.5=ICA - 10432139, OID.2.5.4.97=NTRSK-00166073, CN=Ministerstvo spravodlivosti SR, O=Ministerstvo spravodlivosti SR, C=SK"
              certificateDer: "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"
            areQualifiedTimestamps: true
            timestamps:
            - qualification:
                code: 0
                description: QTSA
              timestampType: SIGNATURE_TIMESTAMP
              subjectDN: "CN=NASES Time Stamp Authority 2, O=Národná agentúra pre sieťové a elektronické služby, OID.2.5.4.97=NTRSK-42156424, OU=SNCA, C=SK"
              certificateDer: "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"
              productionTime: 2023-08-01T12:37:47 +0200
            - qualification:
                code: 0
                description: QTSA
              timestampType: ARCHIVE_TIMESTAMP
              subjectDN: "CN=Timestamp Unit 202301, OID.2.5.4.97=NTRBE-0671516647, O=QTSP: FPS Policy and Support - BOSA, L=Brussels, C=BE"
              certificateDer: "MIIEaDCCA++gAwIBAgIUYgKXRHlVRnKUhBH9VqQi8YkYwxEwCgYIKoZIzj0EAwMwgbsxCzAJBgNVBAYTAkJFMREwDwYDVQQHDAhCcnVzc2VsczEwMC4GA1UECgwnS2luZ2RvbSBvZiBCZWxnaXVtIC0gRmVkZXJhbCBHb3Zlcm5tZW50MT8wPQYDVQQLDDZRVFNQOiBGUFMgUG9saWN5IGFuZCBTdXBwb3J0IC0gQk9TQSAoTlRSQkUtMDY3MTUxNjY0NykxDzANBgNVBAUTBjIwMjEwMTEVMBMGA1UEAwwMVGltZXN0YW1wIENBMB4XDTIyMTIwOTEwNTYwMloXDTI4MTIwOTEwNTYwMVowgYkxCzAJBgNVBAYTAkJFMREwDwYDVQQHDAhCcnVzc2VsczEsMCoGA1UECgwjUVRTUDogRlBTIFBvbGljeSBhbmQgU3VwcG9ydCAtIEJPU0ExGTAXBgNVBGEMEE5UUkJFLTA2NzE1MTY2NDcxHjAcBgNVBAMMFVRpbWVzdGFtcCBVbml0IDIwMjMwMTBZMBMGByqGSM49AgEGCCqGSM49AwEHA0IABLmXpDLz9zw5cho43EAFbjEtjUpXD+tFEihjq7XzBldbtHQHV1cW9Ra+hpLjUa5CvJN+VWF9dEMECf1VZmAS/8ajggH/MIIB+zAMBgNVHRMBAf8EAjAAMB8GA1UdIwQYMBaAFOBOG9N1TbWHTgK2+qlaY8w8qpiZMHsGCCsGAQUFBwEBBG8wbTA6BggrBgEFBQcwAoYuaHR0cDovL2NydC5laWRwa2kuYmVsZ2l1bS5iZS90cy90c2NhMjAyMTAxLmNydDAvBggrBgEFBQcwAYYjaHR0cDovL29jc3AuZWlkcGtpLmJlbGdpdW0uYmUvZWlkLzAwVgYDVR0gBE8wTTBABgdgOA0GA4doMDUwMwYIKwYBBQUHAgEWJ2h0dHBzOi8vcmVwb3NpdG9yeS5laWRwa2kuYmVsZ2l1bS5iZS90czAJBgcEAIvsQAEBMBYGA1UdJQEB/wQMMAoGCCsGAQUFBwMIMG0GCCsGAQUFBwEDBGEwXzAIBgYEAI5GAQEwEwYGBACORgEGMAkGBwQAjkYBBgIwPgYGBACORgEFMDQwMhYsaHR0cHM6Ly9yZXBvc2l0b3J5LmVpZHBraS5iZWxnaXVtLmJlL3Bkcy10c3MTAmVuMD8GA1UdHwQ4MDYwNKAyoDCGLmh0dHA6Ly9jcmwuZWlkcGtpLmJlbGdpdW0uYmUvdHMvdHNjYTIwMjEwMS5jcmwwHQYDVR0OBBYEFJohWdg9YkmxbhVR1YZX+NeXq5aTMA4GA1UdDwEB/wQEAwIHgDAKBggqhkjOPQQDAwNnADBkAjAYALeaQLcKx7V9KnoYN36xjYXLzhbji3hkQMKqGQydMQjUrBp/xtr9UJjpd+qGxaoCMExzxfcWMa7bKav44FhXI9Mf8L5JVEpvzCwugzzjOVquOtX1m+DqAG7CQqhMweUVDQ=="
              productionTime: 2024-08-02T13:01:24 +0200
            signedObjectsIds:
              D-0D9E226205D94EDEBAFEDA4F2A9B17DEDD556529C0753C7F49C197DC8491B71A
          signedObjects:
            - id: D-0D9E226205D94EDEBAFEDA4F2A9B17DEDD556529C0753C7F49C197DC8491B71A
              mimeType: application/pdf
              filename: Sro_119763_B.pdf
          unsignedObjects:
            - mimeType: application/pdf
              filename: some_unsigned_document.pdf

    BadRequestErrorResponseBody:
      type: object
      properties:
        code:
          type: string
          example: BAD_REQUEST
          description: Code that can be used to identify the error.
        message:
          type: string
          example: Parameter missing.
          description: Human readable error message.
        details:
          type: string
          example: Document ID is missing in request.
          description: Optional details.
      required:
        - code
        - message

    ErrorResponseBody:
      type: object
      properties:
        code:
          type: string
          enum:
            - UNPROCESSABLE_INPUT
            - UNSUPPORTED_SIGNATURE_LEVEL
            - MULTIPLE_ORIGINAL_DOCUMENTS
            - ORIGINAL_DOCUMENT_NOT_FOUND
            - MALFORMED_INPUT
            - EMPTY_BODY
            - DATATOSIGN_MISMATCH
            - CERTIFICATE_NOT_VALID
            - FAILED_PARSING_MIMETYPE
          description: |
            Code that can be used to identify the error.
            
            `MULTIPLE_ORIGINAL_DOCUMENTS` will be removed in the future possibly.
            
            `DATATOSIGN_MISMATCH` applies to `/sign` request only.
            
            `CERTIFICATE_NOT_VALID` applies to `/datatosign` and `/sign` requests only.
        message:
          type: string
          example: IllegalArgumentException parsing request body
          description: Human readable error message.
        details:
          type: string
          example: Document must be a PDF when using PAdES.
          description: Optional details.
      required:
        - code
        - message

    EncryptionKeyNotProvidedErrorResponseBody:
      type: object
      properties:
        code:
          type: string
          enum:
            - ENCRYPTION_KEY_MISSING
            - ENCRYPTION_KEY_MALFORMED
          description: Code that can be used to identify the error.
        message:
          type: string
          example: Encryption key not provided.
          description: Human readable error message.
        details:
          type: string
          example: Encryption key must be provided either in X-Encryption-Key header or as encryptionKey query parameter.
          description: Optional details.
      required:
        - code
        - message

    EncryptionKeyMismatchErrorResponseBody:
      type: object
      properties:
        code:
          type: string
          enum:
            - ENCRYPTION_KEY_MISMATCH
          description: Code that can be used to identify the error.
        message:
          type: string
          example: Encryption key mismatch.
          description: Human readable error message.
        details:
          type: string
          example: Provided encryption key failed to decrypt document.
          description: Optional details.
      required:
        - code
        - message

    InternalErrorResponseBody:
      type: object
      properties:
        code:
          type: string
          enum:
            - INTERNAL_ERROR
          description: Code that can be used to identify the error.
        message:
          type: string
          example: Unexpected error while signing document.
          description: Human readable error message.
        details:
          type: string
          example: Something unexpected happened.
          description: Optional details.
      required:
        - code
        - message

    BadGatewayErrorResponseBody:
      type: object
      properties:
        code:
          type: string
          enum:
            - UNRECOGNIZED_DSS_ERROR
            - SIGNING_FAILED
            - INTERNAL_ERROR
          description: Code that can be used to identify the error.
        message:
          type: string
          example: Unexpected error while signing document.
          description: Human readable error message.
        details:
          type: string
          example: Something unexpected happened.
          description: Optional details.
      required:
        - code
        - message

    InvalidSignatureErrorResponseBody:
      type: object
      properties:
        code:
          type: string
          enum:
            - INVALID_SIGNATURE_VALUE
            - SIGNATURE_NOT_IN_TACT
          description: |
            Code that can be used to identify the error.
            
            `INVALID_SIGNATURE_VALUE` - the `signedData` sent by client are not corresponding with dataToSign and certificate.
            
            `SIGNATURE_NOT_IN_TACT` - signature value is not valid for the signed document.
        message:
          type: string
          example: Created signature is not valid.
          description: Human readable error message.
        details:
          type: string
          example: The signed data were not signed by the provided certificate.
          description: Optional details.
      required:
        - code
        - message

  securitySchemes:
    Header:
      type: apiKey
      in: header
      name: X-Encryption-Key
      description: |
        AES256 encryption key in Base64 form (44 base64 characters == 32 bytes) that is used to encrypt and decrypt signing doucment.

        Example: `EeESAfZQh9OTf5qZhHZtgaDJpYtxZD6TIOQJzRgRFgQ=`

    Parameter:
      type: apiKey
      in: query
      name: encryptionKey
      description: |
        AES256 encryption key in Base64 form (44 base64 characters == 32 bytes) that is used to encrypt and decrypt signing doucment.

        Example: `EeESAfZQh9OTf5qZhHZtgaDJpYtxZD6TIOQJzRgRFgQ=`

    Device JWT:
      description: |
        JWT token must be encoded using ES256 and device-specific key matching `sub` claim.
        Maximum `exp` claim duration id 15 minutes.
        `jti` claim is required and must be unique for the 15 minutes. 
        `jti` claim must complain with regular expression: `/\A[0-9a-z\-_]{32,256}\z/i`

        Example of `header` segment:

              {
                "alg": "ES256",
              }

        Example `payload` segment:

              {
                "sub": "123",
                "exp": 1543437976,
                "jti": "4dee8618-abbe-4dc3-83ba-e984d1396f9f"
              }

        Token must be present in either:
        - header `Authorization: Bearer <api-token>`
        - query parameter `?token=<api-token>`
      type: http
      scheme: bearer
      bearerFormat: JWT

    Integration JWT:
      description: |
        JWT token must be encoded using ES256 and integration-specific key matching `sub` claim.
        Maximum `exp` claim duration id 15 minutes.
        `jti` claim is required and must be unique for the 15 minutes. 
        `jti` claim must complain with regular expression: `/\A[0-9a-z\-_]{32,256}\z/i`

        Example of `header` segment:

              {
                "alg": "ES256",
              }

        Example `payload` segment:

              {
                "sub": "123",
                "exp": 1543437976,
                "jti": "4dee8618-abbe-4dc3-83ba-e984d1396f9f"
              }

        Token must be present in either:
        - header `Authorization: Bearer <api-token>`
        - query parameter `?token=<api-token>`
      type: http
      scheme: bearer
      bearerFormat: JWT

  examples:
    XAdES-ASiC_E-TXT:
      value:
        document:
          content: "Testovací dokument"
          filename: TextDocument.txt
        parameters:
          level: XAdES_BASELINE_B
          container: ASiC_E
        payloadMimeType: "text/plain"

    XAdES-ASiC_E-Base64-HTML:
      value:
        document:
          content: "PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiPz48R2VuZXJhbEFnZW5kYSB4bWxucz0iaHR0cDovL3NjaGVtYXMuZ292LnNrL2Zvcm0vQXBwLkdlbmVyYWxBZ2VuZGEvMS45Ij4KICA8c3ViamVjdD5Ob3bDqSBwb2RhbmllPC9zdWJqZWN0PgogIDx0ZXh0PlBvZMOhdmFtIHRvdG8gbm92w6kgcG9kYW5pZS48L3RleHQ+CjwvR2VuZXJhbEFnZW5kYT4="
        parameters:
          level: XAdES_BASELINE_B
          container: ASiC_E
          identifier: "http://data.gov.sk/doc/eform/App.GeneralAgenda/1.9"
          containerXmlns: http://data.gov.sk/def/container/xmldatacontainer+xml/1.1
          schema: "PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiPz48eHM6c2NoZW1hIGVsZW1lbnRGb3JtRGVmYXVsdD0icXVhbGlmaWVkIiBhdHRyaWJ1dGVGb3JtRGVmYXVsdD0idW5xdWFsaWZpZWQiIHhtbG5zOnhzPSJodHRwOi8vd3d3LnczLm9yZy8yMDAxL1hNTFNjaGVtYSIgdGFyZ2V0TmFtZXNwYWNlPSJodHRwOi8vc2NoZW1hcy5nb3Yuc2svZm9ybS9BcHAuR2VuZXJhbEFnZW5kYS8xLjkiIHhtbG5zPSJodHRwOi8vc2NoZW1hcy5nb3Yuc2svZm9ybS9BcHAuR2VuZXJhbEFnZW5kYS8xLjkiPgo8eHM6c2ltcGxlVHlwZSBuYW1lPSJ0ZXh0QXJlYSI+Cjx4czpyZXN0cmljdGlvbiBiYXNlPSJ4czpzdHJpbmciPgo8L3hzOnJlc3RyaWN0aW9uPgo8L3hzOnNpbXBsZVR5cGU+Cjx4czpzaW1wbGVUeXBlIG5hbWU9Im1lbm8iPgo8eHM6cmVzdHJpY3Rpb24gYmFzZT0ieHM6c3RyaW5nIj4KPC94czpyZXN0cmljdGlvbj4KPC94czpzaW1wbGVUeXBlPgoKCjx4czplbGVtZW50IG5hbWU9IkdlbmVyYWxBZ2VuZGEiPgo8eHM6Y29tcGxleFR5cGU+Cjx4czpzZXF1ZW5jZT4KPHhzOmVsZW1lbnQgbmFtZT0ic3ViamVjdCIgdHlwZT0ibWVubyIgbWluT2NjdXJzPSIwIiBuaWxsYWJsZT0idHJ1ZSIgLz4KPHhzOmVsZW1lbnQgbmFtZT0idGV4dCIgdHlwZT0idGV4dEFyZWEiIG1pbk9jY3Vycz0iMCIgbmlsbGFibGU9InRydWUiIC8+CjwveHM6c2VxdWVuY2U+CjwveHM6Y29tcGxleFR5cGU+CjwveHM6ZWxlbWVudD4KPC94czpzY2hlbWE+"
          transformation: ""
        payloadMimeType: application/xml;base64

    XAdES-ASiC_E-Auto:
      value:
        document:
          content: "<?xml version=\"1.0\" encoding=\"UTF-8\"?><GeneralAgenda xmlns=\"http://schemas.gov.sk/form/App.GeneralAgenda/1.9\">\n  <subject>Nové podanie</subject>\n  <text>Podávam toto nové podanie.</text>\n</GeneralAgenda>"
          filename: document.xml
        parameters:
          autoLoadEform: true
          level: XAdES_BASELINE_B
        payloadMimeType: application/xml

    PAdES-PDF:
      value:
        parameters:
          level: PAdES_BASELINE_B
        document:
          content: ""
          filename: document.pdf

    XAdES-ASiC_E-DOCX:
      value:
        document:
          content: "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"
          filename: WordDocument.docx
        parameters:
          level: XAdES_BASELINE_B
          container: ASiC_E
        payloadMimeType: "application/vnd.openxmlformats-officedocument.wordprocessingml.document; base64"

    CAdES-ASiC_E-PNG_md:
      value:
        document:
          content: "iVBORw0KGgoAAAANSUhEUgAAAOEAAADgCAMAAADCMfHtAAAA0lBMVEX///86Z+gRERHMMzMAAAAwYec1ZOhFb+nKKCja4vv1+P5WfOvy9f3KIyONpfFnh+zhjY0mXOfy8vIZGRk8PDz1+fnqra1/f3+goKBIc+r/+vrY4Pru8f3JyclsjO3n7PzP2PmYq/GFne/Azfe3xPWYmJhOTk7QPj6MjIzRUVHo6Oj00tLWZWXvu7u2trYjWuceHh5zc3PJGxvfh4enufQUVOaUqPF2lO5bgu1SeuvF0viuvfSqqqpGRkZZWVnhkpItLS03Nzf76urd3d3HAADmpKSaLwkeAAADH0lEQVR4nO3c21IaQRCA4eG0CMhR0SAQBDQmIhI8BZMYjMb3f6Wgd9u9F1sVKrM9/t9l1y41f1Fu1YyrzgEAAAAAAAAAAAAAAAAAAAD/103zo9Co+l7TdjXaUVypuet7TdvVKOXiIgqtodA+Cu2j0D4K7aPQPgrtC79wcrsQaoEV7o6kge8l/YNqvyKM3EiONjM12sxsOL4txbVXrrEQs0XDldtydud76Skdt9VTRT9pSg3Xi+Rs7HvpKVFIYfZRSGH2UUhh9lFIYfZRGEDhQv1GW/+Wu/1aKK8zU1juCd/cTW0VVxu7lbysbKXwfTqZSOPg3jYRZzKlVWCnieGfCFNoH4X2UWgfhfZRaB+F9lFo3+S2HbcIbX846ksV30tKS78yUk1622SQ6m2TXadurfj+qge9stCr9CM5++jucmKUu3P38rLcdKBuLU99F5bFsW6U66sT4VK6E+GoNB0s5AMp8l8olpQr68LUZ966MEchhRRSSCGFFFJIIYUUvpNC+crIZveU8m0TdetroZ75LlzVhFWl3xOj+4n+vxjNG9eUt95/H8hbNzPPha6qJM+2e2sGTcfSDzNrT0f9VVA7tNPE8E+EKbSPQvsotI9C+yi0j0L7KLSvsRBvmwS3Pzw+kaaB7fEBAAAAAACQDZen0s+u7zVt17IoPXR8r2m7lsV8XPEThcZQaN9h8IXhf4cU2sfPoX0U2hd+IU8a+8LfHybs8S0XdhR3pCRdZuVgY1jci8v/6q4LZ3GFtXvMi+uKn30vPaWhfqp0r3cKcfWW21PXWS5sycKdlvuapzCrKKQw+yikMPsopDD7KKQw+4bqxGKze6qLwrfdk2Sm8HE/7veyu/4ird3Dvrzu1PfS0+oqLukYI+my7Ol8UM6fXg6EuZvJ0cHMqdHBU+dUfdyz58Jz9bNUHM7+1OOuLo6ur+Ss5Qp1OZsnfNyl70L5PMzvDWdX8rl54fSzdO3OCnK2KVTPVwoppJBCCimkkEIKKaSQwiAKE/eHO3H11/2hmL3tD+Usi/vDzqHy/HTdEl7cXI5ac7dWs1lnqT5u6LnQhr+aFu8uA6PcXwAAAABJRU5ErkJggg=="
          filename: "Image.png"
        parameters:
          level: CAdES_BASELINE_B
          container: ASiC_E
