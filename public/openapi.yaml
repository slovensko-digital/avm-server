openapi: '3.0.2'

info:
  title: AVM Server
  version: '0.3.0'

servers:
  - url: https://autogram.slovensko.digital/api/v1
  - url: http://localhost:3000/api/v1

tags:
  - name: Mobile2App
  - name: Desktop2App - Extension
  - name: Desktop2App - Client

security:
  - Header: []
  - Parameter: []

paths:
  /documents:
    post:
      tags:
        - Mobile2App
        - Desktop2App - Extension
      description: Client app posts document along with some parameters to Server. Server encrypts the document using the provided EncryptionKey and stores it on a disk.
      requestBody:
        content:
          "application/json":
            schema:
              $ref: "#/components/schemas/DocumentPostRequestBody"
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
            default: application/json
          required: true
          allowEmptyValue: false
      responses:
        200:
          description: Server stored the data and returned GUID so the client can further access the data.
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/CreateDocumentResponseBody"
          headers:
            Last-Modified:
              schema:
                type: string
                pattern: '^(Mon|Tue|Wed|Thu|Fri|Sat|Sun), \d{2} (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) \d{4} \d{2}:\d{2}:\d{2} GMT$'
                example: 'Tue, 15 Oct 2019 12:45:26 GMT'
              description: Datetime of the last-modified attribute of the uploaded file. Useful for polling with the GET document request.
        400:
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestErrorResponseBody"
        401:
          description: EncryptionKey not provided
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EncryptionKeyNotProvidedErrorResponseBody"
        422:
          description: Unprocessable content
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseBody"
        500:
          description: Internal error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalErrorResponseBody"
        502:
          description: Bad gateway - internal error on AVM microservice
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadGatewayErrorResponseBody"

  /documents/{guid}:
    get:
      tags:
        - Desktop2App - Extension
      description: |
        External system requests signed document at the end of the process.

        This endpoint is also designed for polling with the `If-Modified-Since` header (`TODO`).
      parameters:
        - name: guid
          in: path
          schema:
            type: string
          required: true
          example: bfde97b4-ee27-47bc-97e2-5164ed96a92a
        - name: If-Modified-Since
          in: header
          required: false
          schema:
            type: string
            pattern: '^(Mon|Tue|Wed|Thu|Fri|Sat|Sun), \d{2} (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) \d{4} \d{2}:\d{2}:\d{2} GMT$'
            example: 'Tue, 15 Oct 2019 12:45:26 GMT'
        - name: Accept
          in: header
          schema:
            type: string
            default: application/json
          required: true
          allowEmptyValue: false
      responses:
        200:
          description: Requested document with an array of its signers
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/GetDocumentResponseBody"
          headers:
            Last-Modified:
              schema:
                type: string
                pattern: '^(Mon|Tue|Wed|Thu|Fri|Sat|Sun), \d{2} (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) \d{4} \d{2}:\d{2}:\d{2} GMT$'
                example: 'Tue, 15 Oct 2019 12:45:26 GMT'
              description: "`TODO` Datetime of the last-modified attribute of the requeste document."
        304:
          description: Requested document has not been modified since `If-Modified-Since` header
          headers:
            Last-Modified:
              schema:
                type: string
                pattern: '^(Mon|Tue|Wed|Thu|Fri|Sat|Sun), \d{2} (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) \d{4} \d{2}:\d{2}:\d{2} GMT$'
                example: 'Tue, 15 Oct 2019 12:45:26 GMT'
              description: Datetime of the last-modified attribute of the requeste document.
        400:
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestErrorResponseBody"
        401:
          description: EncryptionKey not provided
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EncryptionKeyNotProvidedErrorResponseBody"
        403:
          description: EncryptionKey mismatch
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EncryptionKeyMismatchErrorResponseBody"
        404:
          description: Not found
        422:
          description: Unprocessable content
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseBody"
        500:
          description: Internal error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalErrorResponseBody"
        502:
          description: Bad gateway - internal error on AVM microservice
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadGatewayErrorResponseBody"

    delete:
      description: |
        External system requests signed document at the end of the process.

        This endpoint is also designed for polling with the `If-Modified-Since` header.
      parameters:
        - name: guid
          in: path
          schema:
            type: string
          required: true
          example: aedf97b4-ee27-47bc-97e2-5164ed96a92a
      responses:
        204:
          description: Document deleted
        400:
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestErrorResponseBody"
        401:
          description: EncryptionKey not provided
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EncryptionKeyNotProvidedErrorResponseBody"
        403:
          description: EncryptionKey mismatch
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EncryptionKeyMismatchErrorResponseBody"
        404:
          description: Not found
        422:
          description: Unprocessable content
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseBody"
        500:
          description: Internal error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalErrorResponseBody"
        502:
          description: Bad gateway - internal error on AVM microservice
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadGatewayErrorResponseBody"

  /documents/{guid}/visualization:
    get:
      tags:
        - Desktop2App - Client
        - Mobile2App
      description: Client app requests encrypted document to visualize it.
      parameters:
        - name: guid
          in: path
          schema:
            type: string
          required: true
          example: bfde97b4-ee27-47bc-97e2-5164ed96a92a
        - name: Accept
          in: header
          schema:
            type: string
            default: application/json
          required: true
          allowEmptyValue: false
      responses:
        200:
          description: OK
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/DocumentVisualizationResponseBody"
        400:
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestErrorResponseBody"
        401:
          description: EncryptionKey not provided
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EncryptionKeyNotProvidedErrorResponseBody"
        403:
          description: EncryptionKey mismatch
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EncryptionKeyMismatchErrorResponseBody"
        404:
          description: Not found
        422:
          description: Unprocessable content
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseBody"
        500:
          description: Internal error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalErrorResponseBody"
        502:
          description: Bad gateway - internal error on AVM microservice
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadGatewayErrorResponseBody"

  /documents/{guid}/validation:
    get:
      tags:
        - Mobile2App
      description: Client app requests a signature validation report of the document.
      parameters:
        - name: guid
          in: path
          schema:
            type: string
          required: true
          example: bfde97b4-ee27-47bc-97e2-5164ed96a92a
        - name: Accept
          in: header
          schema:
            type: string
            default: application/json
          required: true
          allowEmptyValue: false
      responses:
        200:
          description: Validation report
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DocumentValidationResponseBody"
        204:
          description: Document is not signed yet, no content response.
        400:
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestErrorResponseBody"
        401:
          description: EncryptionKey not provided
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EncryptionKeyNotProvidedErrorResponseBody"
        403:
          description: EncryptionKey mismatch
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EncryptionKeyMismatchErrorResponseBody"
        404:
          description: Not found
        422:
          description: Unprocessable content
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseBody"
        500:
          description: Internal error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalErrorResponseBody"
        502:
          description: Bad gateway - internal error on AVM microservice
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadGatewayErrorResponseBody"

  /documents/{guid}/datatosign:
    post:
      tags:
        - Mobile2App
        - Desktop2App - Client
      description: Client app posts signing certificate to the server. Server decrypts the encrypted document from disk, computes DataToSign and returns it along exact signing time in milliseconds. The whole response object is later required for POST /sign request.
      parameters:
        - name: guid
          in: path
          schema:
            type: string
          required: true
          example: bfde97b4-ee27-47bc-97e2-5164ed96a92a
        - name: Accept
          in: header
          schema:
            type: string
            default: application/json
          required: true
          allowEmptyValue: false
      requestBody:
        content:
          "application/json":
            schema:
              $ref: "#/components/schemas/DataToSignRequestBody"
      responses:
        200:
          description: Computed DataToSign and exact SigningTime.
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/DataToSignStructure"
        400:
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestErrorResponseBody"
        401:
          description: EncryptionKey not provided
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EncryptionKeyNotProvidedErrorResponseBody"
        403:
          description: EncryptionKey mismatch
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EncryptionKeyMismatchErrorResponseBody"
        404:
          description: Not found
        422:
          description: Unprocessable content
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseBody"
        500:
          description: Internal error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalErrorResponseBody"
        502:
          description: Bad gateway - internal error on AVM microservice
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadGatewayErrorResponseBody"

  /documents/{guid}/sign:
    post:
      tags:
        - Mobile2App
        - Desktop2App - Client
      description: Create signed document using the SignedData obtained from client.
      parameters:
        - name: guid
          in: path
          schema:
            type: string
          required: true
          example: bfde97b4-ee27-47bc-97e2-5164ed96a92a
        - name: returnSignedDocument
          in: query
          schema:
            type: boolean
            description: Inidcation whether to return signed document in the response. Default to true. Is useful when signing document for external system.
            default: true
          required: false
        - name: Accept
          in: header
          schema:
            type: string
            default: application/json
          required: true
          allowEmptyValue: false
      requestBody:
        content:
          "application/json":
            schema:
              $ref: "#/components/schemas/SignRequestBody"
      responses:
        200:
          description: |
            Document was sucessfuly signed, can be obtained via GET signed request, and is also returned in the response.

            When `"returnSignedDocument": false` Document.Content is empty.
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/SignDocumentResponseBody"
        400:
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestErrorResponseBody"
        401:
          description: EncryptionKey not provided
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EncryptionKeyNotProvidedErrorResponseBody"
        403:
          description: EncryptionKey mismatch
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EncryptionKeyMismatchErrorResponseBody"
        404:
          description: Not found
        409:
          description: Signature invalid
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidSignatureErrorResponseBody"
        422:
          description: Unprocessable content
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseBody"
        500:
          description: Internal error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalErrorResponseBody"
        502:
          description: Bad gateway - internal error on AVM microservice
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadGatewayErrorResponseBody"

components:
  schemas:
    DocumentPostRequestBody:
      type: object
      properties:
        document:
          $ref: "#/components/schemas/Document"
        parameters:
          $ref: "#/components/schemas/SigningParameters"
        payloadMimeType:
          type: string
          example: application/pdf;base64
          description: |
            MIME type for document content and signature parameters XSLT transformation and XSD schema.
            Binary files should be encoded using base64, e.g., `application/pdf;base64`.
            Text formats like XML can be optionally encoded using base64 or supplied as plain text.
            
            If omitted, mimetype is decided based on document.filename and content is expected to be in Base64.
      required:
        - document
        - parameters

    SigningCertificate:
      type: string
      description: Base64 encoded x509 certificate of the signing entity
      example: MIIDZjCCAk6gAwIBAgIEZVH4UzANBgkqhkiG9w0BAQsFADB1MQswCQYDVQQGEwJTSzETMBEGA1UECAwKQnJhdGlzbGF2YTETMBEGA1UEBwwKQnJhdGlzbGF2YTERMA8GA1UECgwIQXV0b2dyYW0xETAPBgNVBAsMCEF1dG9ncmFtMRYwFAYDVQQDDA1BdXRvZ3JhbSBUZXN0MB4XDTIzMTExMzEwMjAwM1oXDTI0MTExMjEwMjAwM1owdTELMAkGA1UEBhMCU0sxEzARBgNVBAgMCkJyYXRpc2xhdmExEzARBgNVBAcMCkJyYXRpc2xhdmExETAPBgNVBAoMCEF1dG9ncmFtMREwDwYDVQQLDAhBdXRvZ3JhbTEWMBQGA1UEAwwNQXV0b2dyYW0gVGVzdDCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBAN8d3eH2xRJeesoNmDIguuHBv5hhqRPsN4LGjGmhQ9NrBAN1DKW31wh0+Tfdx58GNztgLVpElpQB7/yBprqNAKADYXs+onkUbg4X798lAbiaaMvQzY9dVXhFhb1I2ZEGurNhZqP01wbjRso4O0UJ2wSIw5r/sZZji17VhdhquVzDP+RzJeU36CRohE7T1caG6Q1/Tl5arSvEcJMz/8YUYjudB0Bbj+1Z06JTWK+FW/7zJmPNsRGSnF/TLIMDvIabMDoUswP7wBPbnoWy+B/tTdKnl818OKilRlZf5mjmINvZ8I3eXl0WRA/UlURuAp3PprcZnBdejCBHNomgyML8G9sCAwEAATANBgkqhkiG9w0BAQsFAAOCAQEAKD+0fM+cRVkDOoTU9qyESQ6tma8cchjV8dVvTbvHmLTZYCBxKUTugZOz9tENd+9p+1uGc6opcCrmiHyq0oG8D8Y9FLzHFKgslod4+IHUOON/pes+r6b4/0Z4+rjuZ5JrDyeIWsGtwVQaM6BeC1afr/H7uT9kr8Eu1ElNw/SAWBmQZiz3e40XF2ijPd9b43p05O0dqBF0q383bD2K15QJofzCM+0I0OqhJwsWvHlupoPlcF4gRqFV7MUQ5QHXOryUCICp8h2O8988JFvXxaJKGMCU9Zfick3KJ3UsdJ+0jbCL4pOep75abBD6pcdD9qlUF4seiiQiceMbmmeTQfqTgg==

    DataToSign:
      type: string
      description: Base64 encoded DataToSign object
      example: MYIBBDAYBgkqhkiG9w0BCQMxCwYJKoZIhvcNAQcBMC8GCSqGSIb3DQEJBDEiBCBi60eUI/NmObmcTwDsze2zBooVmgpZh8puJa4OhNpEejCBtgYLKoZIhvcNAQkQAi8xgaYwgaMwgaAwgZ0EIJz+4gnulo5kn6oovtKTUeONdQyNjCUKINcKqCmvL7JwMHkwa6RpMGcxCzAJBgNVBAYTAlNLMRMwEQYDVQQHEwpCcmF0aXNsYXZhMRcwFQYDVQRhEw5OVFJTSy0zNTk3NTk0NjETMBEGA1UEChMKRGlzaWcgYS5zLjEVMBMGA1UEAxMMU1ZLIGVJRCBBQ0EyAgoG/pWsnJ0ABRcV

    SigningTime:
      type: integer
      description: Epoch timestamp in milliseconds of the signing time
      example: 1707900119123

    DataToSignRequestBody:
      type: object
      properties:
        signingCertificate:
          $ref: "#/components/schemas/SigningCertificate"
        addTimestamp:
          type: boolean
          description: Indication whether to add a timestamp to the signature if it was not set at document creation time
          example: true
          default: false
      required:
        - signingCertificate

    DataToSignStructure:
      type: object
      properties:
        dataToSign:
          $ref: "#/components/schemas/DataToSign"
        signingTime:
          $ref: "#/components/schemas/SigningTime"
        signingCertificate:
          $ref: "#/components/schemas/SigningCertificate"
      required:
        - dataToSign
        - signingTime
        - signingCertificate

    SignRequestBody:
      type: object
      properties:
        signedData:
          type: string
          description: DataToSign signed by SigningCertificate
          example: eP49QHaKINDTo8/56O6ZlDVKGn3FYq+fRqnCMpQExYVIWrHeZkGoq2FxRRThlEKkOBUS5+8+RHZzOf4yXAFfKjNmNdMnyisEUToQqYSQavec3KZPaDgcvNdZ4MC+tRMcwTod75Zu87UleyOLe3Xoqxjteq7MvqVRCc/C1sX2yVab3yIOSgoZILpHgTl4EqTOonVJts4XBnEzuZKwXS10KyumjoSE41EqTrM/mwy95ebdrRZqNI5EWJIzor8jC5AMsmsBWvxeBKkfepFiWHMtTy1iYkJMZ6vbttlEdTSt9OqSszyw7Z7fP7Tl55hkKL4fiiXA9DOzyibn4E1XD1tRPRaqulxsdIrTbnMgeXlteXG3XXK76+OgqnRxb2hxPx6H8Qiig0GhK1Qn2H26JaNrpFjsqT9n7md9PzLuhmB4MI7HxOUCdAxmRt4cxNkJdHB2NsDBVfQ7FBNxxi35j93D/GD2KpaG77Iq/5ZfBegvQn28N2oGh/xsEqc3hoc6o23E
        dataToSignStructure:
          $ref: "#/components/schemas/DataToSignStructure"
          description: The original DataToSignStructre to compare it with DataToSignStructure generated in this request to verify consistency
      required:
        - signingCertificate
        - signingTime
        - signedData
        - dataToSignStructure

    SignDocumentResponseBody:
      type: object
      properties:
        filename:
          type: string
          description: Filename of the signed document
          example: sample_document.pdf
        mimeType:
          type: string
          description: mimeType of the signed document
          enum:
            - "application/pdf;base64"
            - "application/vnd.etsi.asic-e+zip;base64"
            - "application/vnd.etsi.asic-s+zip;base64"
        content:
          type: string
          description: Base64 encrypted content of the signed document
          example: ZXhhbXBsZSBvZiBzaWduZWQgZG9jdW1lbnQgaW4gYmFzZTY0Cg==
        signedBy:
          type: string
          example: "SERIALNUMBER=PNOSK-1234567890, C=SK, L=Bratislava, SURNAME=Smith, GIVENNAME=John, CN=John Smith"
          description: "Distinguished name of the certificate used/attempting to sign the document."
        issuedBy:
          type: string
          example: "CN=SVK eID ACA2, O=Disig a.s., OID.2.5.4.97=NTRSK-12345678, L=Bratislava, C=SK"
          description: "Distinguished name of the issuer of the certificate used/attempting to sign the document."
      required:
        - filename
        - mimeType
        - content
        - signedBy
        - issuedBy

    GetDocumentResponseBody:
      type: object
      properties:
        filename:
          type: string
          description: Filename of the signed document
          example: sample_document.pdf
        mimeType:
          type: string
          description: mimeType of the signed document
          enum:
            - "application/pdf;base64"
            - "application/vnd.etsi.asic-e+zip;base64"
            - "application/vnd.etsi.asic-s+zip;base64"
        content:
          type: string
          description: Base64 encrypted content of the signed document
          example: ZXhhbXBsZSBvZiBzaWduZWQgZG9jdW1lbnQgaW4gYmFzZTY0Cg==
        signers:
          type: array
          description: Array of all signers of the documents
          items:
            type: object
            properties:
              signedBy:
                type: string
                example: "SERIALNUMBER=PNOSK-1234567890, C=SK, L=Bratislava, SURNAME=Smith, GIVENNAME=John, CN=John Smith"
                description: "Distinguished name of the certificate used/attempting to sign the document."
              issuedBy:
                type: string
                example: "CN=SVK eID ACA2, O=Disig a.s., OID.2.5.4.97=NTRSK-12345678, L=Bratislava, C=SK"
                description: "Distinguished name of the issuer of the certificate used/attempting to sign the document."
      required:
        - filename
        - mimeType
        - content
        - signedBy
        - issuedBy

    Document:
      description: JSON object that is encrypted for
      type: object
      properties:
        filename:
          type: string
          description: Filename of the document
          example: sample_document.pdf
        content:
          type: string
          description: Base64 encrypted content of the document
          example: ZXhhbXBsZSBzdHJpbmcgaW4gYmFzZTY0Cg==
      required:
        - content
        - filename

    SigningParameters:
      type: object
      description: Signing parameters same as in the Autogram API
      properties:
        level:
          type: string
          description: Signature level.
          example: PAdES_BASELINE_B
          enum:
            - PAdES_BASELINE_B
            - PAdES_BASELINE_T
            - XAdES_BASELINE_B
            - XAdES_BASELINE_T
            - CAdES_BASELINE_B
            - CAdES_BASELINE_T
        container:
          type: string
          description: Type of Advanced Signature Container. Defaults to null - no container.
          example:
          enum:
            - ASiC-E
            - ASiC-S
      required:
        - level

    CreateDocumentResponseBody:
      type: object
      properties:
        guid:
          type: string
          description: GUID of the posted document
          example: bfde97b4-ee27-47bc-97e2-5164ed96a92a
      required:
        - guid

    DocumentVisualizationResponseBody:
      type: object
      properties:
        mimeType:
          type: string
          example: "application/pdf;base64"
        filename:
          type: string
          description: Name of the document
          example: sample_document.pdf
        content:
          type: string
          description: Base64 encoded contentto be displayed
          example: ZXhhbXBsZSBzdHJpbmcgaW4gYmFzZTY0Cg==
      required:
        - mimeType
        - content

    DocumentValidationResponseBody:
      type: object
      properties:
        fileFormat:
          type: string
          enum:
            - ASiC_E
            - ASiC_S
            - PAdES
            - XAdES
          description: Format of the validated file. ASiC_E or ASiC_S for an ASiC container. XAdES for standalone XAdES XML file and PAdES for PAdES.
          example: ASiC_E
        signatures:
          type: array
          items:
            type: object
            properties:
              validationResult:
                type: object
                description: |
                  The standard ETSI EN 319 102-1 specifies a complete validation model and procedures for the validation of “AdES digital signatures”, which are implemented in the underlying DSS module.
                  The validation result can have these values:

                  "0 TOTAL_PASSED: indicating that the signature has passed verification and it complies with the signature validation policy"

                  "1 TOTAL_FAILED: indicating that either the signature format is incorrect or that the digital signature value fails the verification"

                  "2 INDETERMINATE: indicating that the format and digital signature verifications have not failed but there is insufficient information to determine if the electronic signature is valid"
                properties:
                  code:
                    type: integer
                    enum:
                      - 0
                      - 1
                      - 2
                    example: 0
                  description:
                    type: string
                    enum:
                      - TOTAL_PASSED
                      - TOTAL_FAILED
                      - INDETERMINATE
                    example: TOTAL_PASSED
              signatureInfo:
                type: object
                properties:
                  claimedSigningTime:
                    type: string
                    description: Claimed signing time based on the signature only.
                    example: "2022-12-20T21:29:13 +0100"
                  timestampSigningTime:
                    type: string
                    description: NotAfter signing time based on the first timestamp in signature.
                    example: "2022-12-20T21:29:13 +0100"
                  level:
                    type: string
                    enum:
                      - XAdES_BASELINE_B
                      - XAdES_BASELINE_T
                      - XAdES_BASELINE_LT
                      - XAdES_BASELINE_LTA
                      - PAdES_BASELINE_B
                      - PAdES_BASELINE_T
                      - PAdES_BASELINE_LT
                      - PAdES_BASELINE_LTA
                      - CAdES_BASELINE_B
                      - CAdES_BASELINE_T
                      - CAdES_BASELINE_LT
                      - CAdES_BASELINE_LTA
                    description: Signature level of the signature.
                    example: XAdES_BASELINE_LTA
                  signingCertificate:
                    type: object
                    description: Signing certificate details.
                    properties:
                      issuerDN:
                        type: string
                        description: RFC1779 of the signing certificate issuer name.
                        example: CN=CA Disig QCA3, OU=ACA-307-2007-2, O=Disig a.s., OID.2.5.4.5=NTRSK-35975946, L=Bratislava, C=SK
                      subjectDN:
                        type: string
                        description: RFC1779 of the signing certificate name.
                        example: C=SK, L=Bratislava, OID.2.5.4.5=NTRSK-30807484, O=Sociálna poisťovňa, CN=Sociálna poisťovňa
                      serialNumber:
                        type: string
                        description: SerialNumber of the signing certificate.
                        example: 81308597867087210236466
                      productionTime:
                        type: string
                        description: Claimed signing time.
                        example: "2022-12-20T21:29:13 +0100"
                      notBefore:
                        type: string
                        description: The NotBefore (issuance) time of the signing certificate.
                        example: "2019-07-03T15:21:51 +0200"
                      notAfter:
                        type: string
                        description: The NotAfter time of the signing certificate.
                        example: "2023-07-02T15:21:51 +0200"
                      qualification:
                        type: object
                        description: Qualification of the signature at validation time. For more info check out Java class eu.europa.esig.dss.enumerations.SignatureQualification
                        properties:
                          code:
                            type: integer
                            example: 1
                          description:
                            type: string
                            enum:
                              - QESIG
                              - QESEAL
                              - UNKNOWN_QC_QSCD-QC-QSCD
                              - ADESIG_QC-QC
                              - ADESEAL_QC-QC
                              - UNKNOWN_QC-QC
                              - ADESIG
                              - ADESEAL
                              - UNKNOWN
                              - INDETERMINATE_QESIG
                              - INDETERMINATE_QESEAL
                              - INDETERMINATE_UNKNOWN_QC_QSCD
                              - INDETERMINATE_ADESIG_QC
                              - INDETERMINATE_ADESEAL_QC
                              - INDETERMINATE_UNKNOWN_QC
                              - INDETERMINATE_ADESIG
                              - INDETERMINATE_ADESEAL
                              - INDETERMINATE_UNKNOWN
                              - NOT_ADES_QC_QSCD
                              - NOT_ADES_QC
                              - NOT_ADES
                              - NA
                            example: QESeal
                  isTimestamped:
                    type: boolean
                    description: Boolean indicating if the signature has any timestamp.
                    example: true
                  timestamps:
                    type: array
                    description: List of timestamps on the signature.
                    items:
                      type: object
                      properties:
                        issuerDN:
                          type: string
                          description: RFC1779 of the timestamp certificate issuer name.
                          example: CN=SNCA4, O=Narodna agentura pre sietove a elektronicke sluzby, OID.2.5.4.97=NTRSK-42156424, OU=SNCA, C=SK
                        subjectDN:
                          type: string
                          description: RFC1779 of the timestamp certificate name.
                          example: CN=NASES Time Stamp Authority 2, O=Národná agentúra pre sieťové a elektronické služby, OID.2.5.4.97=NTRSK-42156424, OU=SNCA, C=SK
                        serialNumber:
                          type: string
                          description: SerialNumber of the timestamp certificate.
                          example: 21220574739238913835018
                        productionTime:
                          type: string
                          description: ProductionTime of the timestamp.
                          example: "2022-12-20T21:29:13 +0100"
                        notBefore:
                          type: string
                          description: The NotBefore (issuance) time of the timestamp certificate.
                          example: "2021-04-15T13:31:24 +0200"
                        notAfter:
                          type: string
                          description: The NotAfter time of the timestamp certificate.
                          example: "2026-04-14T13:31:24 +0200"
                        qualification:
                          type: object
                          description: |
                            Qualification status fo the timestamp at validation time.

                            QTSA - Qualified timestamp" - "urn:cef:dss:timestampQualification:QTSA"
                            TSA - Not qualified timestamp" - "urn:cef:dss:timestampQualification:TSA"
                            NA - Not applicable" - "urn:cef:dss:timestampQualification:notApplicable"
                          properties:
                            code:
                              type: integer
                              enum:
                                - 0
                                - 1
                                - 2
                              example: 0
                            description:
                              type: string
                              enum:
                                - QTSA
                                - TSA
                                - NA
                              example: QTSA
                        timestampType:
                          type: string
                          enum:
                            - CONTENT_TIMESTAMP
                            - ALL_DATA_OBJECTS_TIMESTAMP
                            - INDIVIDUAL_DATA_OBJECTS_TIMESTAMP
                            - SIGNATURE_TIMESTAMP
                            - VRI_TIMESTAMP
                            - VALIDATION_DATA_REFSONLY_TIMESTAMP
                            - VALIDATION_DATA_TIMESTAMP
                            - DOCUMENT_TIMESTAMP
                            - ARCHIVE_TIMESTAMP
                          description: Type of the timestamp
                          example: SIGNATURE_TIMESTAMP
                  signedObjectsIds:
                    type: array
                    items:
                      type: string
                      description: List of IDs referencing files this signature have signed.
                      example: "D-CE70D85E47F41DE68616A3695FE7569BF8F7409F052B74AE0356663393A68D8A"
        signedObjects:
          type: array
          description: List of files in the container that are signed by at least one signature
          items:
            type: object
            properties:
              id:
                type: string
                description: ID of the file used to reference the file in signatures
                example: "D-CE70D85E47F41DE68616A3695FE7569BF8F7409F052B74AE0356663393A68D8A"
              mimeType:
                type: string
                description: MimeType of the file
                example: text/xml
              filename:
                type: string
                description: Filename of the file in the container. If the validated document is PAdES or standalone XAdES where filename is unknown, this attribute should be ignored.
                example: form.xml
        unsignedObjects:
          type: array
          description: List of files in the container that have not been referenced in any signature yet
          items:
            type: object
            properties:
              mimeType:
                type: string
                description: MimeType of the file
                example: application/pdf
              filename:
                type: string
                description: Filename of the file in the container. If the validated document is PAdES or standalone XAdES where filename is unknown, this attribute should be ignored.
                example: Some_unsigned_document.pdf
      required:
        - fileFormat

    BadRequestErrorResponseBody:
      type: object
      properties:
        code:
          type: string
          example: BAD_REQUEST
          description: Code that can be used to identify the error.
        message:
          type: string
          example: Parameter missing.
          description: Human readable error message.
        details:
          type: string
          example: Document ID is missing in request.
          description: Optional details.
      required:
        - code
        - message

    ErrorResponseBody:
      type: object
      properties:
        code:
          type: string
          enum:
            - UNPROCESSABLE_INPUT
            - UNSUPPORTED_SIGNATURE_LEVEL
            - MULTIPLE_ORIGINAL_DOCUMENTS
            - ORIGINAL_DOCUMENT_NOT_FOUND
            - MALFORMED_INPUT
            - EMPTY_BODY
            - DATATOSIGN_MISMATCH
            - CERTIFICATE_NOT_VALID
          description: |
            Code that can be used to identify the error.
            
            `MULTIPLE_ORIGINAL_DOCUMENTS` will be removed in the future possibly.
            
            `DATATOSIGN_MISMATCH` applies to `/sign` request only.
            
            `CERTIFICATE_NOT_VALID` applies to `/datatosign` and `/sign` requests only.
        message:
          type: string
          example: IllegalArgumentException parsing request body
          description: Human readable error message.
        details:
          type: string
          example: Document must be a PDF when using PAdES.
          description: Optional details.
      required:
        - code
        - message

    EncryptionKeyNotProvidedErrorResponseBody:
      type: object
      properties:
        code:
          type: string
          enum:
            - ENCRYPTION_KEY_MISSING
            - ENCRYPTION_KEY_MALFORMED
          description: Code that can be used to identify the error.
        message:
          type: string
          example: Encryption key not provided.
          description: Human readable error message.
        details:
          type: string
          example: Encryption key must be provided either in X-Encryption-Key header or as encryptionKey query parameter.
          description: Optional details.
      required:
        - code
        - message

    EncryptionKeyMismatchErrorResponseBody:
      type: object
      properties:
        code:
          type: string
          enum:
            - ENCRYPTION_KEY_MISMATCH
          description: Code that can be used to identify the error.
        message:
          type: string
          example: Encryption key mismatch.
          description: Human readable error message.
        details:
          type: string
          example: Provided encryption key failed to decrypt document.
          description: Optional details.
      required:
        - code
        - message

    InternalErrorResponseBody:
      type: object
      properties:
        code:
          type: string
          enum:
            - INTERNAL_ERROR
          description: Code that can be used to identify the error.
        message:
          type: string
          example: Unexpected error while signing document.
          description: Human readable error message.
        details:
          type: string
          example: Something unexpected happened.
          description: Optional details.
      required:
        - code
        - message

    BadGatewayErrorResponseBody:
      type: object
      properties:
        code:
          type: string
          enum:
            - UNRECOGNIZED_DSS_ERROR
            - SIGNING_FAILED
            - INTERNAL_ERROR
          description: Code that can be used to identify the error.
        message:
          type: string
          example: Unexpected error while signing document.
          description: Human readable error message.
        details:
          type: string
          example: Something unexpected happened.
          description: Optional details.
      required:
        - code
        - message

    InvalidSignatureErrorResponseBody:
      type: object
      properties:
        code:
          type: string
          enum:
            - INVALID_SIGNATURE_VALUE
            - SIGNATURE_NOT_IN_TACT
          description: |
            Code that can be used to identify the error.
            
            `INVALID_SIGNATURE_VALUE` - the `signedData` sent by client are not corresponding with dataToSign and certificate.
            
            `SIGNATURE_NOT_IN_TACT` - signature value is not valid for the signed document.
        message:
          type: string
          example: Created signature is not valid.
          description: Human readable error message.
        details:
          type: string
          example: The signed data were not signed by the provided certificate.
          description: Optional details.
      required:
        - code
        - message

  securitySchemes:
    Header:
      type: apiKey
      in: header
      name: X-Encryption-Key
      description: AES256 encryption key in hexadecimal form (64 characters) that is used to encrypt and decrypt signing doucment.

    Parameter:
      type: apiKey
      in: query
      name: encryptionKey
      description: AES256 encryption key in hexadecimal form (64 characters) that is used to encrypt and decrypt signing doucment.
